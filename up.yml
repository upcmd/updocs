version: 1.0.0

vars:
  cached_functests_dir: ./build/functests
  cases_dir: ./build/cases
  log_dir: ./reflogs
  content_dir: ./content
  content_src_dir: ./content-src

dvars:
  - name: upproj_dir
    value: '{{ env "UP_PROJ_DIR" |validateMandatoryFailIfNone "upproj_dir" }}'
    flags: [vvv]

  - name: src_functests_dir
    value: '{{.upproj_dir}}/tests/functests'

  - name: ref_dir
    value: '{{.cached_functests_dir}}'

  - name: rendered_log_dir
    value: '{{.cases_dir}}/logs'


tasks:
  -
    name: build
    desc: build the showcases automatically
    task:

      -
        func: shell
        desc: prepare all the self documented cases
        do:
          - 'rm -rf {{.content_dir}}'
          - 'mkdir -p {{.content_dir}}'
          - rm -rf ./build
          - mkdir -p ./build
          - 'cp -rf {{.src_functests_dir}} {{.cached_functests_dir}}'

      -
        func: shell
        desc: prepare the directory for the already documented cases
        do:
          - rm -rf {{.cases_dir}}
          - mkdir -p {{.cases_dir}}
          - mkdir -p {{.rendered_log_dir}}

      -
        func: shell
        desc: prepare all the self documented cases
        do:
          - 'cd {{.cached_functests_dir}}; ls c????.yml'
        reg: cases

      - func: cmd
        desc: debug
        do:
          -
            name: print
            cmd: '{{.cases}}'

      - func: cmd
        desc: get the case list object
        dvars:
          - name: void
            value: '{{ .cases | splitLines |reg "caselist" }}'

      -
        func: call
        desc: filter out all cases have already got documents
        do:
          - process_case
        loop: "caselist"

      -
        func: shell
        desc: copy generated docs to publish dir
        do:
          - 'cp -rf {{.cases_dir}}/* {{.content_dir}}/'
          - 'cp -rf {{.content_src_dir}}/* {{.content_dir}}/'
          - 'mkdir -p {{.content_dir}}/reflogs'
          - 'cp -rf {{.log_dir}}/* {{.content_dir}}/reflogs/'
          - kill `ps -ef|grep hugo|tail -1|awk '{print $2}'`

  -
    name: process_case
    task:

      -
        func: cmd
        do:
          - name: reg
            cmd:
              name: casefilename
              value: '{{.loopitem}}'

          - name: reg
            cmd:
              name: casename
              value: '{{.casefilename | replace ".yml" ""}}'

          - name: print
            cmd: 'processing {{.casefilename}}'

          - name: readfile
            desc: read yml file
            cmd:
              filename: '{{.casefilename}}'
              dir: '{{.cached_functests_dir}}'
              reg: caseyml

          - name: print
            cmd: |
              yml file content:
              {{.caseyml}}

          - name: query
            cmd:
              ymlkey: caseyml
              path: doc_meta.
              ymlonly: true
              reg: docyml

      -
        func: call
        desc: add casename and log_dir into data model
        do: data_enrich
        if: '{{ gt (.docyml|len) 0 }}'

      -
        func: cmd
        do:
          - name: yml_delete
            cmd:
              ymlfile: '{{.casefilename}}'
              refdir: '{{.ref_dir}}'
              path: doc_meta
              inplace: true

          - name: yml_delete
            cmd:
              ymlfile: '{{.casefilename}}'
              refdir: '{{.ref_dir}}'
              path: notes
              inplace: true

          - name: readfile
            desc: review if the file content is correct
            cmd:
              filename: '{{.casefilename}}'
              dir: '{{.ref_dir}}'
              reg: final_yml

          - name: print
            desc: show the modified yml content
            cmd: '{{.final_yml}}'

      -
        func: cmd
        dvars:
          - name: casedoc
            value: '{{.docyml}}'
            ex pand: 2
            flags: [to_object, reg]

      -
        func: call
        desc: create sub folders and template the docment
        do: generate_doc
        if: '{{ gt (.casedoc|len) 0 }}'

  -
    name: data_enrich
    task:
      - func: cmd
        do:
          - name: yml_write
            cmd:
              ymlstr: '{{.docyml}}'
              path: casename
              value: '{{.casename}}'
              reg: docyml
          - name: yml_write
            cmd:
              ymlstr: '{{.docyml}}'
              path: ref_dir
              value: '{{.ref_dir}}'
              reg: docyml
          - name: yml_write
            cmd:
              ymlstr: '{{.docyml}}'
              path: main_yml_ref_file
              value: '{{.ref_dir}}/{{.casefilename}}'
              reg: docyml
          - name: yml_write
            cmd:
              ymlstr: '{{.docyml}}'
              path: main_log_ref_file
              value: '{{.log_dir}}/{{.casename}}_vvv.log'
              reg: docyml

          - name: query
            cmd:
              ymlkey: docyml
              path: weight.
              ymlonly: true
              reg: weightstr

          - name: print
            cmd: |
              existing weight: {{.weightstr}}
              weight string length: {{.weightstr|len}}

      - func: cmd
        do:
          - name: print
            cmd: 'setup weight'

          - name: yml_write
            cmd:
              ymlstr: '{{.docyml}}'
              path: weight
              value: '{{ substr 1 5 .casename | atoi |mul 10| add 100 }}'
              reg: docyml
        if: '{{ eq (.weightstr|len) 0 }}'

      - func: cmd
        do:

#          - name: yml_write
#            cmd:
#              ymlstr: '{{.docyml}}'
#              path: page_weight
#              value: '{{ .casename |replace "c" "" |atoi}}'
#              reg: docyml
#          - name: yml_write
#            cmd:
#              ymlstr: '{{.docyml}}'
#              path: log_dir
#              nodevalue: '{{.log_dir}}'
#              reg: docyml

          - name: print
            cmd: |
              ---------- docyml content---------
              {{.docyml}}

          - name: return
            cmd:
              - docyml

#          - name: exit
  -
    name: generate_doc
    task:

#      - func: shell
#        do:
#          - 'echo  "casename: {{.casename}} - folder: {{.casedoc_object.folder}}" >> debug'

      - func: cmd
        do:
          - name: reg
            cmd:
              name: target_dir
              value: '{{.cases_dir}}/{{.casedoc_object.folder}}'
#          - name: trace
#            cmd: debug ==>


#      - func: shell
#        do:
#          - 'echo  "casename: {{.casename}} - target: {{.target_dir}}" >> debug'

#      - func: cmd
#        do:
#          - name: trace
#            cmd: <== debug

      - func: shell
        do:
          - 'mkdir -p {{.target_dir}}'

      -
        func: cmd
        desc: debug and exit
        do:
          - name: printobj
            cmd: casedoc_object
#          - name: exit
        if: '{{eq .casename "c0009"}}'

      -
        func: cmd
        desc: generate the document
        do:
          - name: printobj
            cmd: casedoc_object

          - name: print
            desc: casedoc length
            cmd: '{{ .casedoc|len }}'

          - name: template
            desc: template the document
            cmd:
              src: ./templates/doc.template
              dest: '{{.target_dir}}/{{.casename}}.md'
              datakey: casedoc_object

      -
        func: call
        name: loop_verbose_level
        desc: loop all different verbose level caller
        do: generate_log_pages
        loop:
          - v
          - vv
          - vvv
          - vvvv
          - vvvvv
          - vvvvvv
          - vvvvvvv

  -
    name: generate_log_pages
    desc: generage verbose level log
    task:
      -
        func: cmd
        dvars:
          - name: logidinumber
            value: '{{ substr 1 5 .casename | atoi |mul 10| add 10000 |add .loopindex }}'
            flags: [vvv,]

          - name: logtemplate
            value: |
              title: {{.casename}}_{{.loopitem}}
              weight: {{.logidinumber}}
              loglevle: {{.loopitem}}
              casename: {{.casename}}
              relatedlink: ../../{{.casedoc_object.folder}}/{{.casename}}
              log_ref_file: {{.log_dir}}/{{.casename}}_{{.loopitem}}.log
            flags:
              - to_object
              - vvvvv
        do:
          - name: print
            cmd: '{{.logtemplate}}'
          - name: print
            cmd: '{{.loopitem}}'

          - name: template
            desc: generate the log
            cmd:
              src: ./templates/log.template
              dest: '{{.rendered_log_dir}}/{{.casename}}_{{.loopitem}}.md'
              datakey: logtemplate_object
